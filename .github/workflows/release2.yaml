on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Latest Release

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Lint files
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.3'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: latest
  test:
    name: Run tests
    runs-on: 'ubuntu-latest'
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.3'
      - run: go test -v -cover
  release:
    name: Create Release
    runs-on: 'ubuntu-latest'
    needs: test
    strategy:
      matrix:
        goosarch:
          - 'darwin_amd64'
          - 'darwin_arm64'
          - 'dragonfly_amd64'
          - 'freebsd_386'
          - 'freebsd_amd64'
          - 'freebsd_arm'
          - 'freebsd_arm64'
          - 'linux_386'
          - 'linux_amd64'
          - 'linux_arm'
          - 'linux_arm64'
          - 'netbsd_386'
          - 'netbsd_amd64'
          - 'netbsd_arm'
          - 'netbsd_arm64'
          - 'openbsd_386'
          - 'openbsd_amd64'
          - 'openbsd_arm'
          - 'openbsd_arm64'
          - 'solaris_amd64'
          - 'windows_386'
          - 'windows_amd64'
          - 'windows_arm'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.18'
      - name: Extract CLI name and version
        run: |
          # Get the tag name from the event payload
          TAG_NAME=${{ github.ref_name }}
          
          # Use a regular expression to extract the CLI name and version
          if [[ $TAG_NAME =~ ^([^-]+)-([^-]+)$ ]]; then
            CLI_NAME="${BASH_REMATCH[1]}"
            CLI_VERSION="${BASH_REMATCH[2]}"
            
            echo "CLI_NAME=$CLI_NAME" >> $GITHUB_ENV
            echo "CLI_VERSION=$CLI_VERSION" >> $GITHUB_ENV
          else
            echo "Invalid tag format: $TAG_NAME"
            echo "Tag should be of format CLI-VSN. e.g. ipinfo-1.0.0"
            exit 1
          fi
      - name: Get OS and arch info
        run: |
          GOOSARCH=${{matrix.goosarch}}
          GOOS=${GOOSARCH%_*}
          GOARCH=${GOOSARCH#*_}
          BINARY_NAME=${{ env.CLI_NAME }}_${{ env.CLI_VERSION }}_$GOOS_$GOARCH
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "GOOS=$GOOS" >> $GITHUB_ENV
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV
      - name: Build
        run: |
          go build -o "$BINARY_NAME" -v
      - name: Release Notes
        run:
          git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
      - name: Release with Notes
        uses: softprops/action-gh-release@v1
        with:
          body_path: ".github/RELEASE-TEMPLATE.md"
          draft: true
          files: ${{env.BINARY_NAME}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
